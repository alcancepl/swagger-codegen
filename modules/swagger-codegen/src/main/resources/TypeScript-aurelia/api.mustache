import { {{#models}}{{#model}}{{{classname}}}{{^-last}}, {{/-last}}{{/model}}{{/models}} } from './api-models';
import {HttpResponseMessage} from 'aurelia-http-client';
import {inject, singleton} from 'aurelia-framework';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export interface IApiExecutor {
    execute(methodeType: string, uri: string, needAuthorization: boolean, queryParams: any, bodyParams: any): Promise<HttpResponseMessage>;
    
}

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}

@inject('IApiExecutor')
export class {{classname}} {

    constructor(private executor: IApiExecutor) { };

{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) : Promise<{ response: HttpResponseMessage {{#returnType}}, content: {{{returnType}}} {{/returnType}} }> {
        const uri = '/api{{path}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', String({{paramName}})){{/pathParams}};
        var queryParameters: any = {};
        var formParams: any = {};
{{#allParams}}{{#required}}
        // verify required parameter '{{paramName}}' is set
        if (!{{paramName}}) {
            throw new Error('Missing required parameter {{paramName}} when calling {{nickname}}');
        }
{{/required}}{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            queryParameters['{{baseName}}'] = {{paramName}};
        }
{{/queryParams}}
{{#formParams}}
        if ({{paramName}} !== undefined) {
            formParams['{{baseName}}'] = {{paramName}};
        }
{{/formParams}}

        var bodyParams: any = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

        return this.executor.execute('{{httpMethod}}', uri, {{#authMethods}}true{{/authMethods}}{{^authMethods}}false{{/authMethods}}, queryParameters, bodyParams).then((result) => {
            return { response: result{{#returnType}}, content: result.content {{/returnType}} };
        })
    }
{{/operation}}
}
{{/operations}}
{{/apis}}
{{/apiInfo}}